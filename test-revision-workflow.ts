import { NestFactory } from '@nestjs/core';
import { AppModule } from './src/app.module';
import { UsersService } from './src/users/users.service';
import { ProgramsService } from './src/programs/services/programs.service';
import { ExpertiseService } from './src/programs/services/expertise.service';
import { ExpertAssignmentService } from './src/programs/services/expert-assignment.service';
import { UserRole } from './src/users/enums/user.enum';
import { ProgramStatus, ExpertiseStatus } from './src/programs/enums/program.enum';

async function testRevisionWorkflow() {
  const app = await NestFactory.createApplicationContext(AppModule);
  const usersService = app.get(UsersService);
  const programsService = app.get(ProgramsService);
  const expertiseService = app.get(ExpertiseService);
  const expertAssignmentService = app.get(ExpertAssignmentService);

  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É\n');

  try {
    // 1. –ù–∞–π–¥–µ–º –∞–≤—Ç–æ—Ä–∞ –∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
    console.log('üë§ –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    const admin = await usersService.findByEmail('admin@gos.ru');
    if (!admin) {
      console.log('‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      await app.close();
      return;
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–≤—Ç–æ—Ä–∞
    let author;
    try {
      author = await usersService.findByEmail('author.test@example.com');
      if (!author) {
        author = await usersService.create({
          email: 'author.test@example.com',
          password: 'author123',
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∞–≤—Ç–æ—Ä–∞
        await usersService.update(author.id, {
          firstName: '–¢–µ—Å—Ç–æ–≤—ã–π',
          lastName: '–ê–≤—Ç–æ—Ä',
        });
      }
    } catch (error) {
      console.log('–ê–≤—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è');
    }

    // –ù–∞–π–¥–µ–º —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
    const experts = await usersService['userRepository']
      .createQueryBuilder('user')
      .where("array_to_string(user.roles, ',') LIKE :pattern", { pattern: `%${UserRole.EXPERT}%` })
      .andWhere('user.status = :status', { status: 'active' })
      .limit(6)
      .getMany();

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤: ${experts.length}`);
    if (experts.length < 2) {
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!');
      await app.close();
      return;
    }

    // 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É
    console.log('\nüìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã...');
    const programData = {
      title: `–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏ - ${new Date().toISOString()}`,
      description: '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É',
      duration: 72,
      targetAudience: '–£—á–∏—Ç–µ–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —à–∫–æ–ª',
      competencies: '–ü–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏',
      learningOutcomes: '–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏',
      content: '–ë–∞–∑–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –Ω–µ–¥–æ—á–µ—Ç–∞–º–∏',
      methodology: '–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–±—É—á–µ–Ω–∏—è',
      assessment: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è',
    };

    const program = await programsService.create(programData, author);
    console.log(`‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ–∑–¥–∞–Ω–∞: "${program.title}"`);

    // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É
    console.log('\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É...');
    await programsService.submit(program.id, { message: '–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É' }, author);
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
    console.log('\nüë• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤...');
    const programWithExpertises = await programsService.findOne(program.id, admin);
    console.log(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ ${programWithExpertises.expertises.length} —ç–∫—Å–ø–µ—Ä—Ç–æ–≤`);

    // 5. –ù–∞–π–¥–µ–º –ø–µ—Ä–≤—É—é —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É –∏ –æ—Ç–ø—Ä–∞–≤–∏–º —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    const firstExpertise = programWithExpertises.expertises[0];
    const assignedExpert = firstExpertise.expert;
    
    console.log('\nüîç –û—Ç–ø—Ä–∞–≤–∫–∞ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º...');
    await expertiseService.sendForRevision(firstExpertise.id, {
      revisionComments: '–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—É–Ω–∫—Ç–∞–º...',
      generalFeedback: '–û–±—â–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —ç–∫—Å–ø–µ—Ä—Ç–∞'
    }, assignedExpert);

    // 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É
    console.log('\n‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É...');
    const revisionDto = {
      revisionComments: '–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞:\n1. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ\n2. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–±—É—á–µ–Ω–∏—è\n3. –ù–µ—Ç —á–µ—Ç–∫–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –æ—Ü–µ–Ω–∫–∏',
      generalFeedback: '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∏–º–µ–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏',
      recommendations: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:\n- –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã\n- –£—Ç–æ—á–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏\n- –†–∞—Å—à–∏—Ä–∏—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é —á–∞—Å—Ç—å'
    };

    const revisedExpertise = await expertiseService.sendForRevision(
      firstExpertise.id, 
      revisionDto, 
      assignedExpert
    );

    console.log('‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É');
    console.log(`   –°—Ç–∞—Ç—É—Å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã: ${revisedExpertise.status}`);

    // 7. –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≥—Ä–∞–º–º—ã
    const programAfterRevision = await programsService.findOne(program.id, admin);
    console.log(`   –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≥—Ä–∞–º–º—ã: ${programAfterRevision.status}`);

    // 8. –ê–≤—Ç–æ—Ä –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ
    console.log('\nüîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å–ª–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏...');
    const resubmitDto = {
    console.log('‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É');
    console.log(`   –°—Ç–∞—Ç—É—Å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã: ${firstExpertise.status}`);

    // 9. –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    const finalProgram = await programsService.findOne(program.id, admin);
    console.log('\nüë• –ù–æ–≤—ã–µ —ç–∫—Å–ø–µ—Ä—Ç—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã:');
    finalProgram.expertises.forEach((expertise, index) => {
      if (expertise.status === ExpertiseStatus.PENDING) {
        console.log(`   ${index + 1}. ${expertise.expert.firstName} ${expertise.expert.lastName}`);
        console.log(`      –ü–æ–∑–∏—Ü–∏—è: ${expertise.position || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
        console.log(`      –°—Ç–∞—Ç—É—Å: ${expertise.status}`);
        console.log(`      –ö—Ä—É–≥ –¥–æ—Ä–∞–±–æ—Ç–∫–∏: ${expertise.revisionRound}`);
      }
    });

    console.log('\nüéâ –¢–µ—Å—Ç —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:');
    console.log(`   ‚úì –≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É`);
    console.log(`   ‚úì –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–ª—É—á–∏–ª–∞ —Å—Ç–∞—Ç—É—Å "—Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏"`);
    console.log(`   ‚úì –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º –≤–µ—Ä—Å–∏–∏`);
    console.log(`   ‚úì –ù–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–æ–≤—ã–µ —ç–∫—Å–ø–µ—Ä—Ç—ã (–∏—Å–∫–ª—é—á–µ–Ω—ã –ø—Ä–µ–¥—ã–¥—É—â–∏–µ)`);
    console.log(`   ‚úì –ò—Å—Ç–æ—Ä–∏—è –¥–æ—Ä–∞–±–æ—Ç–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    console.error('Stack:', error.stack);
  } finally {
    await app.close();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testRevisionWorkflow();
}
