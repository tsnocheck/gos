import { Test, TestingModule } from '@nestjs/testing';
import { INestApplication } from '@nestjs/common';
import * as request from 'supertest';
import { AppModule } from './src/app.module';

describe('Program Creation Workflow (e2e)', () => {
  let app: INestApplication;
  let authToken: string;
  let userId: string;

  beforeAll(async () => {
    const moduleFixture: TestingModule = await Test.createTestingModule({
      imports: [AppModule],
    }).compile();

    app = moduleFixture.createNestApplication();
    await app.init();
  });

  afterAll(async () => {
    await app.close();
  });

  it('should create a full program with new interfaces and co-authors functionality', async () => {
    // 1. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const registerResponse = await request(app.getHttpServer())
      .post('/auth/register')
      .send({
        email: 'test.program.creator@example.com',
        password: 'TestPass123!',
        firstName: '–¢–µ—Å—Ç–æ–≤—ã–π',
        lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
      })
      .expect(201);

    userId = registerResponse.body.user.id;

    // 2. –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
    const loginResponse = await request(app.getHttpServer())
      .post('/auth/login')
      .send({
        email: 'test.program.creator@example.com',
        password: 'TestPass123!'
      })
      .expect(201);

    authToken = loginResponse.body.token;

    // 3. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
    const programData = {
      title: '–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å –Ω–æ–≤—ã–º–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º–∏',
      description: '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤',
      goals: ['–¶–µ–ª—å 1', '–¶–µ–ª—å 2'],
      tasks: ['–ó–∞–¥–∞—á–∞ 1', '–ó–∞–¥–∞—á–∞ 2'],
      expectedResults: ['–†–µ–∑—É–ª—å—Ç–∞—Ç 1', '–†–µ–∑—É–ª—å—Ç–∞—Ç 2'],
      duration: 72, // —á–∏—Å–ª–æ –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
      category: 'test',
      modules: [
        {
          title: '–¢–µ—Å—Ç–æ–≤—ã–π –º–æ–¥—É–ª—å',
          description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è',
          duration: 18,
          section: 'NPR', // –Ω–æ–≤–æ–µ –ø–æ–ª–µ section —Å enum ProgramSection
          attestations: [
            {
              type: 'exam',
              description: '–≠–∫–∑–∞–º–µ–Ω',
              duration: 2,
              moduleCode: 'TEST_001' // –Ω–æ–≤–æ–µ –ø–æ–ª–µ moduleCode
            }
          ]
        }
      ]
    };

    // 4. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
    const createResponse = await request(app.getHttpServer())
      .post('/programs')
      .set('Authorization', `Bearer ${authToken}`)
      .send(programData)
      .expect(201);

    const programId = createResponse.body.id;

    console.log('‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', programId);

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ–∑–¥–∞–ª–∞—Å—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    const getResponse = await request(app.getHttpServer())
      .get(`/programs/id/${programId}`)
      .set('Authorization', `Bearer ${authToken}`)
      .expect(200);

    const program = getResponse.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è
    expect(program.modules).toBeDefined();
    expect(program.modules.length).toBe(1);
    expect(program.modules[0].section).toBe('NPR');
    expect(program.modules[0].attestations[0].moduleCode).toBe('TEST_001');
    expect(program.modules[0]).not.toHaveProperty('total'); // –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ total —É–¥–∞–ª–µ–Ω–æ
    expect(program.modules[0].attestations[0]).not.toHaveProperty('total'); // –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ total —É–¥–∞–ª–µ–Ω–æ

    console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');

    // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ–∞–≤—Ç–æ—Ä–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø)
    try {
      const coAuthorsResponse = await request(app.getHttpServer())
        .get('/programs/co-authors')
        .set('Authorization', `Bearer ${authToken}`)
        .expect(200);

      console.log('‚úÖ API —Å–æ–∞–≤—Ç–æ—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      console.log(`Found ${coAuthorsResponse.body.length} available co-authors`);
    } catch (error) {
      console.log('‚ö†Ô∏è API —Å–æ–∞–≤—Ç–æ—Ä–æ–≤ —Ç—Ä–µ–±—É–µ—Ç –æ—Å–æ–±—ã—Ö –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
    }

    console.log('üéâ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Ä–∞–±–æ—á–µ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!');
  });
});
