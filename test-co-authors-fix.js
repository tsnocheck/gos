const { Pool } = require('pg');

// –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è PostgreSQL –∑–∞–ø—Ä–æ—Å–∞ –≤ CoAuthorsService
async function testCoAuthorsQuery() {
  const pool = new Pool({
    host: 'localhost',
    port: 5432,
    user: 'postgres',
    password: 'password',
    database: 'goszalupa',
  });

  try {
    console.log('–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π PostgreSQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–∞–≤—Ç–æ—Ä–æ–≤...');
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ CoAuthorsService
    const roles = ['author'];
    const pattern = `%${roles.join('%')}%`;
    
    const query = `
      SELECT u.id, u.email, u."firstName", u."lastName" 
      FROM users u 
      WHERE u.status = 'active' 
        AND array_to_string(u.roles, ',') LIKE $1
    `;
    
    console.log('–í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å:', query);
    console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', { pattern });
    
    const result = await pool.query(query, [pattern]);
    
    console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ! –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é author: ${result.rows.length}`);
    
    if (result.rows.length > 0) {
      console.log('–ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
      result.rows.slice(0, 3).forEach((user, index) => {
        console.log(`${index + 1}. ${user.firstName} ${user.lastName} (${user.email})`);
      });
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    return false;
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testCoAuthorsQuery()
  .then(success => {
    if (success) {
      console.log('\nüéâ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ PostgreSQL –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
    } else {
      console.log('\nüí• –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª. –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.');
    }
    process.exit(success ? 0 : 1);
  })
  .catch(error => {
    console.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
