import { NestFactory } from '@nestjs/core';
import { AppModule } from './src/app.module';
import { UsersService } from './src/users/users.service';
import { ProgramsService } from './src/programs/services/programs.service';
import { ExpertAssignmentService } from './src/programs/services/expert-assignment.service';
import { CreateProgramDto } from './src/programs/dto/program.dto';
import { UserRole, UserStatus } from './src/users/enums/user.enum';
import { Repository } from 'typeorm';
import { User } from './src/users/entities/user.entity';
import { getRepositoryToken } from '@nestjs/typeorm';

async function testCompleteWorkflow() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤\n');

  const app = await NestFactory.createApplicationContext(AppModule);
  
  const usersService = app.get(UsersService);
  const programsService = app.get(ProgramsService);
  const expertAssignmentService = app.get(ExpertAssignmentService);
  const userRepository = app.get<Repository<User>>(getRepositoryToken(User));

  try {
    // 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–≤—Ç–æ—Ä–∞
    console.log('üë§ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–≤—Ç–æ—Ä–∞...');
    const authorData = {
      email: `complete-test-author-${Date.now()}@test.com`,
      password: 'TestPassword123!',
      firstName: '–ü–æ–ª–Ω—ã–π',
      lastName: '–¢–µ—Å—Ç',
      department: '–û—Ç–¥–µ–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
      position: '–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫',
      roles: [UserRole.AUTHOR],
      status: UserStatus.ACTIVE
    };

    const author = await usersService.create(authorData);
    console.log('‚úÖ –ê–≤—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω:', author.firstName, author.lastName, 'ID:', author.id);

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ...');
    const allExperts = await userRepository
      .createQueryBuilder('user')
      .where("array_to_string(user.roles, ',') LIKE :pattern", { pattern: `%${UserRole.EXPERT}%` })
      .getMany();
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤: ${allExperts.length}`);
    allExperts.forEach((expert, index) => {
      console.log(`   ${index + 1}. ${expert.firstName} ${expert.lastName} (${expert.email})`);
    });

    if (allExperts.length < 2) {
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!');
      await app.close();
      return;
    }

    // 3. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
    console.log('\nüìö –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã...');
    const programData: CreateProgramDto = {
      title: `–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ ${Date.now()}`,
      description: '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞',
      targetAudience: '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏',
      duration: 40,
      competencies: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤',
      content: '–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤',
      learningOutcomes: '3 —ç–∫—Å–ø–µ—Ä—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'
    };

    const program = await programsService.create(programData, author);
    console.log('‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ–∑–¥–∞–Ω–∞:', program.title);
    console.log('üìä ID –ø—Ä–æ–≥—Ä–∞–º–º—ã:', program.id);

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤...');
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
    await new Promise(resolve => setTimeout(resolve, 2000));

    const programWithExpertises = await programsService.findOne(program.id, author);
    
    if (programWithExpertises.expertises && programWithExpertises.expertises.length > 0) {
      console.log(`‚úÖ –£–°–ü–ï–•! –ù–∞–∑–Ω–∞—á–µ–Ω–æ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑: ${programWithExpertises.expertises.length}`);
      programWithExpertises.expertises.forEach((expertise, index) => {
        console.log(`   ${index + 1}. ${expertise.expert.firstName} ${expertise.expert.lastName}`);
        console.log(`      - –ü–æ–∑–∏—Ü–∏—è: ${expertise.position || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
        console.log(`      - –î–∞—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: ${expertise.assignedAt}`);
        console.log(`      - –°—Ç–∞—Ç—É—Å: ${expertise.status}`);
      });
    } else {
      console.log('‚ùå –û–®–ò–ë–ö–ê! –≠–∫—Å–ø–µ—Ä—Ç—ã –ù–ï –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
    console.error(error.stack);
  }

  await app.close();
  console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testCompleteWorkflow();
